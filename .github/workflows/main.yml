name: Build & Deploy to Azure Container Instance

on:
  push:
    branches: [ main ]

jobs:
  deploy-aci:
    runs-on: ubuntu-latest

    env:
      AZURE_CREDENTIALS:     ${{ secrets.AZURE_CREDENTIALS }}
      RESOURCE_GROUP:        ${{ secrets.RESOURCE_GROUP }}
      LOCATION:              ${{ secrets.LOCATION }}
      CONTAINER_NAME:        ${{ secrets.CONTAINER_NAME }}
      REGISTRY_LOGIN_SERVER: ${{ secrets.REGISTRY_LOGIN_SERVER }}
      REGISTRY_USERNAME:     ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD:     ${{ secrets.REGISTRY_PASSWORD }}
      REPOSITORY_NAME:       ${{ secrets.REPOSITORY_NAME }}
      IMAGE_TAG:             ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Trim possible newlines uit secrets
        run: |
          for v in RESOURCE_GROUP LOCATION CONTAINER_NAME; do
            echo "$v=$(echo "${!v}" | tr -d '\r\n')" >> $GITHUB_ENV
          done

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Create Resource Group (indien nodig)
        run: |
          if ! az group show --name "$RESOURCE_GROUP" &> /dev/null; then
            az group create --name "$RESOURCE_GROUP" --location "$LOCATION"
          fi

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}

      - name: Remove existing ACI (if exists)
        run: |
          az container delete \
            --resource-group "$RESOURCE_GROUP" \
            --name           "$CONTAINER_NAME" \
            --yes \
          || echo "Geen oude ACI om te verwijderen."

      - name: Deploy to Azure Container Instance
        run: |
          az container create \
            --resource-group  "$RESOURCE_GROUP" \
            --location        "$LOCATION" \
            --name            "$CONTAINER_NAME" \
            --image           "${REGISTRY_LOGIN_SERVER}/${REPOSITORY_NAME}:${IMAGE_TAG}" \
            --dns-name-label  "$CONTAINER_NAME" \
            --ports           3000 \
            --cpu             1 \
            --memory          1.5 \
            --os-type         Linux \
            --restart-policy  Always
