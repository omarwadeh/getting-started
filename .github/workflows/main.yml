name: Build & Deploy to ACI
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_CREDENTIALS:       ${{ secrets.AZURE_CREDENTIALS }}
      AZURE_SUBSCRIPTION_ID:   ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      RESOURCE_GROUP:          ${{ secrets.RESOURCE_GROUP }}
      LOCATION:                ${{ secrets.LOCATION }}
      CONTAINER_NAME:          ${{ secrets.CONTAINER_NAME }}
      REGISTRY_LOGIN_SERVER:   ${{ secrets.REGISTRY_LOGIN_SERVER }}
      REGISTRY_USERNAME:       ${{ secrets.REGISTRY_USERNAME }}
      REGISTRY_PASSWORD:       ${{ secrets.REGISTRY_PASSWORD }}
      REPOSITORY_NAME:         ${{ secrets.REPOSITORY_NAME }}
      IMAGE_TAG:               "23"
      SHARE_NAME:              ${{ secrets.SHARE_NAME }}
      STORAGE_ACCOUNT_NAME:    ${{ secrets.STORAGE_ACCOUNT_NAME }}
      STORAGE_ACCOUNT_KEY:     ${{ secrets.STORAGE_ACCOUNT_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Azure (incl. subscription)
        uses: azure/login@v1
        with:
          creds:          ${{ env.AZURE_CREDENTIALS }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Delete existing ACI container (if any)
        run: |
          az container delete \
            --resource-group "$RESOURCE_GROUP" \
            --name           "$CONTAINER_NAME" \
            --yes \
          || echo "→ geen oude container om te verwijderen, ik ga door…"

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY_LOGIN_SERVER }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Build & Push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY_LOGIN_SERVER }}/${{ env.REPOSITORY_NAME }}:${{ env.IMAGE_TAG }}

      - name: Validate that Azure File Share exists
        run: |
          echo "→ Controleren of File Share '$SHARE_NAME' bestaat…"
          EXISTS=$(az storage share exists \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --account-key  "$STORAGE_ACCOUNT_KEY" \
            --name         "$SHARE_NAME" \
            --query exists -o tsv)
          if [ "$EXISTS" != "true" ]; then
            echo "!! File Share '$SHARE_NAME' bestaat niet. Stoppen." >&2
            exit 1
          fi
          echo "→ File Share bestaat, doorgaan."

      - name: Deploy to Azure Container Instance (with debug)
        run: |
          set -x
          az container create \
            --resource-group                 "$RESOURCE_GROUP" \
            --location                       "$LOCATION" \
            --name                           "$CONTAINER_NAME" \
            --image                          "$REGISTRY_LOGIN_SERVER/$REPOSITORY_NAME:$IMAGE_TAG" \
            --registry-login-server          "$REGISTRY_LOGIN_SERVER" \
            --registry-username              "$REGISTRY_USERNAME" \
            --registry-password              "$REGISTRY_PASSWORD" \
            --dns-name-label                 "$CONTAINER_NAME" \
            --os-type                        Linux \
            --ports                          3000 \
            --cpu                            1 \
            --memory                         1.5 \
            --azure-file-volume-share-name   "$SHARE_NAME" \
            --azure-file-volume-account-name "$STORAGE_ACCOUNT_NAME" \
            --azure-file-volume-account-key  "$STORAGE_ACCOUNT_KEY" \
            --azure-file-volume-mount-path   /mnt/azfile \
            --protocol                       TCP \
            --restart-policy                 Always \
            --debug
